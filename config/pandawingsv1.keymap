#include "keys_de.h"
#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// https://github.com/urob/zmk-config#timeless-homerow-mods

#define PRIOR_IDLE 175
#define QUICK_TAP_MS 200
#define TAPPING_TERM 225
#define HRM_TAP_TERM 275
#define TAP_DANCE_MS 300

&caps_word { continue-list = <DELETE DEL BACKSPACE MINUS KP_MINUS SLASH QUESTION SEMICOLON LEFT_BRACKET RIGHT_BRACKET LEFT_BRACE RIGHT_BRACE SINGLE_QUOTE DE_A_UMLAUT DE_O_UMLAUT DE_U_UMLAUT>; };

// &lt &mt from https://github.com/urob/zmk-config/blob/main/config/base.keymap
// hold-preferred, balanced, tap-preferred, tap-unless-interrupted

&lt {
    flavor = "hold-preferred";
    tapping-term-ms = <TAPPING_TERM>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

&mt {
    flavor = "hold-preferred";
    tapping-term-ms = <TAPPING_TERM>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

/ {
    behaviors {
        ht_as: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <QUICK_TAP_MS>;
            bindings = <&shifted>, <&kp>;
        };

        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;
            #binding-cells = <2>;
            tapping-term-ms = <HRM_TAP_TERM>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <PRIOR_IDLE>;
            flavor = "tap-unless-interrupted";
            //            flavor = "balanced";
            //            hold-trigger-on-release;
                       hold-trigger-key-positions = <5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 37 38 39>;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <HRM_TAP_TERM>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <PRIOR_IDLE>;
            flavor = "tap-unless-interrupted";
            //            flavor = "balanced";
            //            hold-trigger-on-release;
                        hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36>;
        };

        td_modifier: td_modifier {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_MODIFIER";
            #binding-cells = <0>;
            tapping-term-ms = <TAP_DANCE_MS>;
            bindings = <&kp LGUI>, <&kp LCTRL>, <&kp LSHIFT>;
        };

        td_quotes: td_quotes {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_QUOTES";
            #binding-cells = <0>;
            bindings = <&kp DE_DOUBLE_QUOTES>, <&kp DE_SINGLE_QUOTE>;

            tapping-term-ms = <TAP_DANCE_MS>;
        };

        td_parenthesis: td_parenthesis {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_PARENTHESIS";
            #binding-cells = <0>;
            tapping-term-ms = <TAP_DANCE_MS>;
            bindings = <&kp DE_LEFT_PARENTHESIS>, <&kp DE_RIGHT_PARENTHESIS>;
        };

        td_bracket: td_bracket {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_BRACKET";
            #binding-cells = <0>;
            tapping-term-ms = <TAP_DANCE_MS>;
            bindings = <&kp DE_LEFT_BRACKET>, <&kp DE_RIGHT_BRACKET>;
        };

        td_brace: td_brace {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_BRACE";
            #binding-cells = <0>;
            tapping-term-ms = <TAP_DANCE_MS>;
            bindings = <&kp DE_LEFT_BRACE>, <&kp DE_RIGHT_BRACE>;
        };

        td_less_than: td_less_than {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LESS_THAN";
            #binding-cells = <0>;
            tapping-term-ms = <TAP_DANCE_MS>;
            bindings = <&kp DE_LESS_THAN>, <&kp DE_GREATER_THAN>;
        };

        td_cmos_j_x: td_cmos_j_x {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_CMOS_J_X";
            #binding-cells = <0>;
            tapping-term-ms = <TAP_DANCE_MS>;
            bindings = <&kp J>, <&kp X>;
        };

        td_cmos_sz_q: td_cmos_sz_q {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_CMOS_SZ_Q";
            #binding-cells = <0>;
            tapping-term-ms = <TAP_DANCE_MS>;
            bindings = <&kp DE_SZ>, <&kp Q>;
        };

        td_cmos_ue_minus: td_cmos_umlaut_u_minus {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_CMOS_UE_MINUS";
            #binding-cells = <0>;
            tapping-term-ms = <TAP_DANCE_MS>;
            bindings = <&kp DE_U_UMLAUT>, <&kp KP_MINUS>;
        };

        td_cmos_oe_underscore: td_cmos_umlaut_o_underscore {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_CMOS_OE_UNDERSCORE";
            #binding-cells = <0>;
            tapping-term-ms = <TAP_DANCE_MS>;
            bindings = <&kp DE_O_UMLAUT>, <&kp DE_UNDERSCORE>;
        };
    };

    combos {
        compatible = "zmk,combos";

        select_all {
            bindings = <&kp LC(A)>;
            key-positions = <23 24>;
            layers = <0 1>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <24 25>;
            layers = <0 1>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <25 26>;
            layers = <0 1>;
        };

        cut {
            bindings = <&kp LC(X)>;
            key-positions = <26 27>;
            layers = <0 1>;
        };

        //        umlaut_a {
        //            bindings = <&as DE_A_UMLAUT>;
        //            key-positions = <29 30>;
        //            layers = <0>;
        //        };
        //
        //        umlaut_o {
        //            bindings = <&as DE_O_UMLAUT>;
        //            key-positions = <30 31>;
        //            layers = <0>;
        //        };
        //
        //        umlaut_u {
        //            bindings = <&as DE_U_UMLAUT>;
        //            key-positions = <29 31>;
        //            layers = <0>;
        //        };

        de_sz {
            bindings = <&as DE_SZ>;
            key-positions = <29 30>;
        };

        return {
            bindings = <&kp RETURN>;
            key-positions = <36 37>;
            layers = <0 1>;
        };

        line_start {
            bindings = <&kp HOME>;
            key-positions = <12 13 14>;
            layers = <0 1>;
        };

        line_end {
            bindings = <&kp END>;
            key-positions = <17 18 19>;
            layers = <0 1>;
        };

        rside_reset {
            bindings = <&bootloader>;
            key-positions = <6 8>;
            layers = <3>;
        };

        lside_reset {
            bindings = <&bootloader>;
            key-positions = <1 3>;
            layers = <2>;
        };

        to_base {
            bindings = <&to 0>;
            key-positions = <35 36>;
            layers = <1 2 3 4 7 8 5 6>;
        };

        to_cmos {
            bindings = <&to 1>;
            key-positions = <10 22>;
            layers = <0>;
        };

        to_game {
            bindings = <&to 7>;
            key-positions = <22 10>;
            layers = <1>;
        };
    };

    macros {
        game_vrise_inv_clear: game_vrise_inv_clear {
            compatible = "zmk,behavior-macro";
            label = "GAME_VRISE_INV_CLEAR";
            #binding-cells = <0>;
            wait-ms = <50>;
            tap-ms = <50>;
            bindings = <&kp R &mkp RCLK &kp E &kp R &mkp RCLK &kp E &kp R &mkp RCLK &kp E &kp R &mkp RCLK &kp E &kp R &mkp RCLK &kp E &kp R &mkp RCLK &kp E &kp R &mkp RCLK &kp E &kp R &mkp RCLK &kp E &kp R &mkp RCLK &kp E &kp R &mkp RCLK &kp E>;
        };

        shifted: macro_shifted_kp {
            #binding-cells = <1>;
            label = "MACRO_SHIFTED_KP";
            compatible = "zmk,behavior-macro-one-param";
            bindings =
                <&macro_press>,
                <&kp LSHFT &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LSHFT>;
        };

        as: autoshift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            label = "AUTOSHIFT_KP";
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &ht_as MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &ht_as MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        QWERTZ {
            //        | SW2  | SW3  | SW4  | SW5  | SW6  |  | SW27 | SW26 | SW25 | SW24 | SW23 | 
            // | SW7  | SW8  | SW9  | SW10 | SW11 | SW12 |  | SW33 | SW32 | SW31 | SW30 | SW29 | SW34 |
            // | SW13 | SW14 | SW15 | SW16 | SW17 | SW18 |  | SW39 | SW38 | SW37 | SW36 | SW35 | SW28 |
            //                      | SW19 | SW20 | SW21 |  | SW42 | SW41 | SW40 |

            bindings = <
&kp Q                             &kp W  &kp E                &kp R              &kp T           &kp DE_Z   &kp U              &kp I                &kp O       &kp P
&mt LEFT_ALT ESCAPE  &hml LGUI A  &kp S  &hml LEFT_CONTROL D  &hml LEFT_SHIFT F  &kp G           &kp H      &hmr LEFT_SHIFT J  &hmr LEFT_CONTROL K  &kp L       &hmr LGUI DE_O_UMLAUT  &mt LEFT_ALT DE_U_UMLAUT
&td_quotes           &kp DE_Y     &kp X  &kp C                &kp V              &kp B           &kp N      &kp M              &as DE_COMMA         &as DE_DOT  &as DE_MINUS           &mt RIGHT_ALT DE_A_UMLAUT
                                         &td_modifier         &kp SPACE          &lt 2 DELETE    &lt 3 TAB  &kp BACKSPACE      &caps_word
            >;
        };

        KEYBR_CMOS {
            bindings = <
&td_cmos_j_x                                      &kp K       &kp U              &kp O          &kp DE_A_UMLAUT           &kp P      &kp B              &kp L         &kp M     &td_cmos_sz_q
&mt LEFT_ALT ESCAPE              &hml LEFT_GUI W  &kp H       &hml LCTRL I       &hml LSHIFT E  &kp A                     &kp D      &hmr LEFT_SHIFT T  &hmr LCTRL N  &kp R     &hmr LEFT_GUI S  &mt LEFT_ALT DE_SINGLE_QUOTE
&mt LEFT_SHIFT DE_DOUBLE_QUOTES  &kp DE_Y         &as DE_DOT  &td_cmos_ue_minus  &as DE_COMMA   &td_cmos_oe_underscore    &kp G      &kp C              &kp V         &kp DE_Z  &kp F            &mt RALT RETURN
                                                              &td_modifier       &kp SPACE      &lt 2 DELETE              &lt 3 TAB  &kp BACKSPACE      &caps_word
            >;
        };

        SYMBOLS_NUMBERS {
            bindings = <
&kp DE_SECTION                             &kp DE_DOLLAR  &kp DE_AMPERSAND  &kp DE_PERCENT    &as DE_ACUTE     &kp BACKSPACE    &kp DE_N7  &kp DE_N8   &kp DE_N9  &as DE_CARET
&kp ESCAPE             &kp DE_AT_SIGN      &td_brace      &td_parenthesis   &td_bracket       &td_less_than    &kp DE_EQUAL     &kp DE_N4  &kp DE_N5   &kp DE_N6  &kp KP_PLUS   &as DE_HASH
&mt LEFT_GUI DE_TILDE  &kp DE_EXCLAMATION  &kp DE_PIPE    &kp KP_SLASH      &kp DE_BACKSLASH  &kp DE_EURO      &kp KP_ASTERISK  &kp DE_N1  &kp DE_N2   &kp DE_N3  &kp KP_MINUS  &mt LEFT_SHIFT DE_COMMA
                                                          &none             &none             &none            &mo 4            &kp DE_N0  &kp DE_DOT
            >;
        };

        MEDIA_NAVIGATION {
            bindings = <
&kp F1                      &kp F3  &kp F4  &kp F6        &kp F7            &kp K_PREVIOUS  &kp C_PLAY  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp K_MUTE
&kp LCTRL     &kp F10       &kp F5  &kp F2  &kp F11       &kp F12           &kp LEFT_ARROW  &kp DOWN    &kp UP_ARROW       &kp RIGHT        &none       &kp PAGE_UP
&kp LEFT_ALT  &bt BT_SEL 1  &kp F8  &kp F9  &bt BT_SEL 0  &bt BT_CLR_ALL    &kp K_NEXT      &kp K_MENU  &kp K_SCREENSAVER  &kp K_POWER      &none       &kp PAGE_DOWN
                                    &none   &none         &kp LEFT_SHIFT    &none           &none       &none
            >;
        };

        SYMBOLS_MOUSE {
            bindings = <
&mo 6                        &none          &none          &none         &none               &kp RA(DE_Z)    &kp RA(DE_U)    &kp RA(LS(DE_U))  &kp RA(DE_I)     &none
&kp LCTRL  &mo 5             &mkp MCLK      &mkp LCLK      &mkp RCLK     &none               &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP      &mmv MOVE_RIGHT  &kp LEFT_GUI  &none
&kp LSHFT  &kp RA(LS(DE_C))  &kp DE_SUPER2  &kp DE_SUPER3  &kp DE_MICRO  &kp RA(LS(DE_R))    &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP      &msc SCRL_RIGHT  &none         &none
                                            &to 1          &to 0         &none               &none           &none           &none
            >;
        };

        SCROLL {
            bindings = <
&trans          &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        SNIPER {
            bindings = <
&trans          &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        GAME {
            bindings = <
&kp G                       &kp Q     &kp W  &kp E  &kp R        &kp T       &kp DE_Z  &kp UP          &kp I          &kp O
&kp ESCAPE  &kp LEFT_SHIFT  &kp A     &kp S  &kp D  &kp F        &kp G       &kp LEFT  &kp DOWN_ARROW  &kp RIGHT      &kp L         &kp P
&kp TAB     &kp LCTRL       &kp DE_Y  &kp X  &kp C  &kp T        &kp B       &kp N     &kp M           &kp DE_PERIOD  &kp DE_COMMA  &kp DE_MINUS
                                      &kp M  &mo 8  &kp SPACE    &kp RETURN  &kp F12   &none
            >;
        };

        GAME_2 {
            bindings = <
&game_vrise_inv_clear             &kp DE_N2  &kp DE_N3  &kp DE_N4  &kp DE_N1    &trans  &trans         &trans  &trans  &trans
&kp DE_DOT             &kp F5     &trans     &trans     &trans     &kp I        &trans  &trans         &trans  &trans  &trans  &kp DE_N7
&kp LEFT_ALT           &kp DE_N7  &kp B      &kp J      &kp V      &kp DE_N5    &trans  &trans         &trans  &trans  &trans  &kp DE_N6
                                             &kp DE_N6  &trans     &trans       &trans  &kp BACKSPACE  &trans
            >;
        };
    };
};
