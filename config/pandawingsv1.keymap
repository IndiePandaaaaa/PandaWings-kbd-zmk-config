#include "keys_de.h"
#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// https://github.com/urob/zmk-config#timeless-homerow-mods

#define PRIOR_IDLE 100   // 125
#define QUICK_TAP_MS 175 // 200
#define TAPPING_TERM 200 // 225
#define HRM_TAP_TERM 275
#define TAP_DANCE_MS 300

&caps_word { continue-list = <DELETE DEL BACKSPACE MINUS KP_MINUS SLASH QUESTION SEMICOLON LEFT_BRACKET RIGHT_BRACKET LEFT_BRACE RIGHT_BRACE SINGLE_QUOTE DE_A_UMLAUT DE_O_UMLAUT DE_U_UMLAUT>; };

// &lt &mt from https://github.com/urob/zmk-config/blob/main/config/base.keymap
// hold-preferred, balanced, tap-preferred, tap-unless-interrupted

&lt {
    flavor = "hold-preferred";
    tapping-term-ms = <TAPPING_TERM>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

&mt {
    flavor = "hold-preferred";
    tapping-term-ms = <TAPPING_TERM>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

/ {
    behaviors {
        ht_as: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <QUICK_TAP_MS>;
            bindings = <&shifted>, <&kp>;
        };

        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "hold-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 39 38 37>;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "hold-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 2 3 4 13 14 15 25 26 27 34 35 36>;
        };
    };

    combos {
        compatible = "zmk,combos";

        select_all {
            bindings = <&kp LC(A)>;
            key-positions = <23 24>;
            layers = <0 1>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <24 25>;
            layers = <0 1>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <25 26>;
            layers = <0 1>;
        };

        cut {
            bindings = <&kp LC(X)>;
            key-positions = <26 27>;
            layers = <0 1>;
        };

        return {
            bindings = <&kp RETURN>;
            key-positions = <36 37>;
            layers = <0 1>;
        };

        line_start {
            bindings = <&kp HOME>;
            key-positions = <12 13 14>;
            layers = <0 1>;
        };

        line_end {
            bindings = <&kp END>;
            key-positions = <17 18 19>;
            layers = <0 1>;
        };

        rside_reset {
            bindings = <&bootloader>;
            key-positions = <6 8 7 9>;
            layers = <3>;
        };

        lside_reset {
            bindings = <&bootloader>;
            key-positions = <1 3 0 2>;
            layers = <3>;
        };

        to_base_layer {
            bindings = <&to 0>;
            key-positions = <35 36>;
        };

        alt {
            bindings = <&sk LEFT_ALT>;
            key-positions = <10 22>;
            layers = <0 1>;
        };

        vim_exit {
            bindings = <&vimexit>;
            key-positions = <0 1>;
        };

        panic_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <10 0>;
        };
    };

    macros {
        game_vrise_inv_clear: game_vrise_inv_clear {
            compatible = "zmk,behavior-macro";
            label = "GAME_VRISE_INV_CLEAR";
            #binding-cells = <0>;
            wait-ms = <50>;
            tap-ms = <50>;
            bindings = <&kp R &mkp RCLK &kp E &kp R &mkp RCLK &kp E &kp R &mkp RCLK &kp E &kp R &mkp RCLK &kp E &kp R &mkp RCLK &kp E &kp R &mkp RCLK &kp E &kp R &mkp RCLK &kp E &kp R &mkp RCLK &kp E &kp R &mkp RCLK &kp E &kp R &mkp RCLK &kp E>;
        };

        shifted: macro_shifted_kp {
            #binding-cells = <1>;
            label = "MACRO_SHIFTED_KP";
            compatible = "zmk,behavior-macro-one-param";
            bindings =
                <&macro_press>,
                <&kp LSHFT &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LSHFT>;
        };

        as: autoshift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            label = "AUTOSHIFT_KP";
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &ht_as MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &ht_as MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
        };

        vimexit: vimexit {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DE_COLON &kp W &kp Q &kp A>;
            label = "VIMEXIT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        QWERTZ {
            //        | SW2  | SW3  | SW4  | SW5  | SW6  |  | SW27 | SW26 | SW25 | SW24 | SW23 | 
            // | SW7  | SW8  | SW9  | SW10 | SW11 | SW12 |  | SW33 | SW32 | SW31 | SW30 | SW29 | SW34 |
            // | SW13 | SW14 | SW15 | SW16 | SW17 | SW18 |  | SW39 | SW38 | SW37 | SW36 | SW35 | SW28 |
            //                      | SW19 | SW20 | SW21 |  | SW42 | SW41 | SW40 |

            bindings = <
&kp Q                     &kp W  &kp E         &kp R         &kp T           &kp DE_Z   &kp U              &kp I                &kp O       &kp P
&sk LEFT_WIN    &kp A     &kp S  &hml LCTRL D  &hml LSHFT F  &kp G           &kp H      &hmr LEFT_SHIFT J  &hmr LEFT_CONTROL K  &kp L       &kp DE_O_UMLAUT  &kp DE_U_UMLAUT
&sk LEFT_SHIFT  &kp DE_Y  &kp X  &kp C         &kp V         &kp B           &kp N      &kp M              &as DE_COMMA         &as DE_DOT  &as DE_MINUS     &kp DE_A_UMLAUT
                                 &sk LCTRL     &lt 4 SPACE   &lt 3 DELETE    &lt 2 TAB  &kp BACKSPACE      &as DE_SZ
            >;
        };

        NEO-NOTED {
            bindings = <
&kp DE_Z               &kp DE_Y  &kp U            &kp A            &kp Q              &kp P      &kp B          &kp M         &kp L       &kp F
&sk LEFT_GUI    &kp C  &kp S     &hml LCTRL I     &hml LSHIFT E    &kp O              &kp D      &hmr LSHIFT T  &hmr LCTRL N  &kp R       &kp H  &kp DE_SZ
&sk LEFT_SHIFT  &kp V  &kp X     &kp DE_U_UMLAUT  &kp DE_A_UMLAUT  &kp DE_O_UMLAUT    &kp W      &kp G          &as DE_COMMA  &as DE_DOT  &kp K  &kp J
                                 &sk LCTRL        &lt 4 SPACE      &lt 3 DELETE       &lt 2 TAB  &kp BACKSPACE  &as MINUS
            >;
        };

        SYMBOLS {
            bindings = <
&kp DE_DEGREE                  &kp DE_DOUBLE_QUOTES  &kp KP_SLASH             &kp DE_EXCL          &kp DE_TILDE        &kp DE_EQUAL         &kp DE_QUESTION       &kp DE_BACKSLASH          &kp DE_SINGLE_QUOTE  &kp DE_CARET
&kp ESCAPE     &kp DE_AT_SIGN  &kp DE_LEFT_BRACE     &kp DE_LEFT_PARENTHESIS  &kp DE_LEFT_BRACKET  &kp DE_LESS_THAN    &kp DE_GREATER_THAN  &kp DE_RIGHT_BRACKET  &kp DE_RIGHT_PARENTHESIS  &kp DE_RIGHT_BRACE   &kp DE_PLUS   &kp TAB
&caps_word     &kp DE_HASH     &kp DE_DOLLAR         &kp DE_PIPE              &kp DE_EURO          &kp DE_SECT         &kp DE_ASTRK         &kp DE_PERCENT        &kp DE_AMPERSAND          &kp DE_GRAVE         &kp DE_ACUTE  &kp RA(DE_I)
                                                     &kp DE_MICRO             &kp LC(DEL)          &kp DEL             &none                &none                 &none
            >;
        };

        NUMBERS_FUNCTIONS {
            bindings = <
&to 3                               &kp F1  &kp F4  &kp F7  &kp F10    &kp DE_EQUAL     &kp N7  &kp N8        &kp N9  &kp KP_MINUS
&to 1             &kp LEFT_GUI      &kp F2  &kp F5  &kp F8  &kp F11    &kp KP_DIVIDE    &kp N4  &kp N5        &kp N6  &kp KP_PLUS   &kp DE_EURO
&kp LC(LEFT_ALT)  &kp LS(LEFT_GUI)  &kp F3  &kp F6  &kp F9  &kp F12    &kp KP_ASTERISK  &kp N1  &kp N2        &kp N3  &kp DE_DOT    &kp DE_CARET
                                            &none   &none   &none      &kp TAB          &kp N0  &kp DE_COMMA
            >;
        };

        NAVIGATION {
            bindings = <
&none         &none  &none  &none  &none    &none           &none           &none         &none            &none
&none  &none  &to 8  &to 5  &to 1  &none    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &kp LEFT_SHIFT  &none
&none  &none  &none  &none  &none  &none    &none           &none           &none         &none            &none           &none
                     &none  &none  &none    &none           &none           &none
            >;
        };

        MOUSE {
            bindings = <
&mo 7                &none      &none      &none      &none    &none  &none           &none           &none         &none
&kp LCTRL  &mo 6     &mkp RCLK  &mkp MCLK  &mkp LCLK  &none    &none  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &kp LEFT_ALT
&kp LSHFT  &kp LGUI  &none      &none      &none      &none    &none  &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &kp LGUI
                                &none      &to 1      &to 0    &none  &none           &none
            >;
        };

        SCROLL {
            bindings = <
&trans          &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        SNIPER {
            bindings = <
&trans          &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        GAME {
            bindings = <
&kp V                       &kp Q     &kp W  &kp E  &kp R        &kp T       &kp DE_Z  &kp UP          &kp I          &kp O
&kp ESCAPE  &kp LEFT_SHIFT  &kp A     &kp S  &kp D  &kp F        &kp G       &kp LEFT  &kp DOWN_ARROW  &kp RIGHT      &kp L         &kp P
&kp TAB     &kp LCTRL       &kp DE_Y  &kp X  &kp C  &kp T        &kp B       &kp N     &kp M           &kp DE_PERIOD  &kp DE_COMMA  &kp DE_MINUS
                                      &kp M  &sl 9  &kp SPACE    &kp RETURN  &kp F12   &none
            >;
        };

        GAME_2 {
            bindings = <
&game_vrise_inv_clear             &kp DE_N2  &none      &kp DE_N4  &kp DE_N1    &none  &none          &none  &none  &none
&kp DE_DOT             &kp F5     &kp DE_N1  &none      &kp DE_N3  &kp I        &none  &none          &none  &none  &none  &kp DE_N7
&kp LEFT_ALT           &kp DE_N7  &kp B      &kp J      &kp G      &kp DE_N5    &none  &none          &none  &none  &none  &kp DE_N6
                                             &kp DE_N6  &none      &kp F12      &none  &kp BACKSPACE  &none
            >;
        };
    };
};
