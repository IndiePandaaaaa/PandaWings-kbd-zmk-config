#include "keys_de.h"
#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// https://github.com/urob/zmk-config#timeless-homerow-mods

#define QUICK_TAP_MS 175

// &lt &mt from https://github.com/urob/zmk-config/blob/main/config/base.keymap

&lt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

&mt {
    flavor = "hold-preferred";
    tapping-term-ms = <220>;
    quick-tap-ms = <220>;
};

&caps_word { continue-list = <DELETE DEL BACKSPACE MINUS KP_MINUS SLASH QUESTION SEMICOLON LEFT_BRACKET RIGHT_BRACKET LEFT_BRACE RIGHT_BRACE SINGLE_QUOTE DE_A_UMLAUT DE_O_UMLAUT DE_U_UMLAUT>; };

/ {
    combos {
        compatible = "zmk,combos";

        rside_reset {
            bindings = <&bootloader>;
            key-positions = <6 8>;
            layers = <2>;
        };

        lside_reset {
            bindings = <&bootloader>;
            key-positions = <1 3>;
            layers = <1>;
        };

        select_all {
            bindings = <&kp LC(A)>;
            key-positions = <23 24>;
            layers = <0 5>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <24 25>;
            layers = <0 5>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <25 26>;
            layers = <0 5>;
        };

        cut {
            bindings = <&kp LC(X)>;
            key-positions = <26 27>;
            layers = <0 5>;
        };

        opening_parenthesis {
            bindings = <&kp DE_LEFT_PARENTHESIS>;
            key-positions = <13 14>;
            layers = <1>;
        };

        opening_bracket {
            bindings = <&kp DE_LEFT_BRACKET>;
            key-positions = <12 13>;
            layers = <1>;
        };

        opening_brace {
            bindings = <&kp DE_LEFT_BRACE>;
            key-positions = <14 12>;
            layers = <1>;
        };

        //        closing_parenthesis {
        //            bindings = <&kp DE_RIGHT_PARENTHESIS>;
        //            key-positions = <17 18>;
        //            layers = <1>;
        //        };
        //
        //        closing_bracket {
        //            bindings = <&kp DE_RIGHT_BRACKET>;
        //            key-positions = <18 19>;
        //            layers = <1>;
        //        };
        //
        //        closing_brace {
        //            bindings = <&kp DE_RIGHT_BRACE>;
        //            key-positions = <17 19>;
        //            layers = <1>;
        //        };
        //
        //
        //        euro_sign {
        //            bindings = <&kp DE_EURO>;
        //            key-positions = <12 14>;
        //            layers = <1>;
        //        };

        umlaut_a {
            bindings = <&kp DE_A_UMLAUT>;
            key-positions = <29 30>;
            layers = <0 5>;
        };

        umlaut_o {
            bindings = <&kp DE_O_UMLAUT>;
            key-positions = <30 31>;
            layers = <0 5>;
        };

        umlaut_u {
            bindings = <&kp DE_U_UMLAUT>;
            key-positions = <31 29>;
            layers = <0 5>;
        };

        de_sz {
            bindings = <&kp DE_SZ>;
            key-positions = <17 19>;
            layers = <0 5>;
        };

        return {
            bindings = <&kp RETURN>;
            key-positions = <36 37>;
            layers = <0 5>;
        };

        line_start {
            bindings = <&kp HOME>;
            key-positions = <12 13 14>;
            layers = <0 5>;
        };

        line_end {
            bindings = <&kp END>;
            key-positions = <17 18 19>;
            layers = <0 5>;
        };

        rside_click_left {
            bindings = <&mkp LCLK>;
            key-positions = <17 29>;
            layers = <0 1 2 3 4>;
        };

        rside_click_middle {
            bindings = <&mkp MCLK>;
            key-positions = <18 30>;
            layers = <0 1 2 3 4>;
        };

        rside_click_right {
            bindings = <&mkp RCLK>;
            key-positions = <19 31>;
            layers = <0 1 2 3 4>;
        };

        lside_click_left {
            bindings = <&mkp LCLK>;
            key-positions = <26 24>;
            layers = <0 1 2>;
        };

        lside_click_middle {
            bindings = <&mkp MCLK>;
            key-positions = <26 24 25>;
            layers = <0 1 2>;
        };

        to_base {
            bindings = <&to 0>;
            key-positions = <35 36>;
            layers = <3 4 1 2 5>;
        };

        to_game {
            bindings = <&to 3>;
            key-positions = <22 10>;
            layers = <0>;
        };

        to_colemak {
            bindings = <&to 5>;
            key-positions = <21 33>;
            layers = <0 3>;
        };
    };

    macros {
        ctrl_alt: ctrl_alt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LEFT_ALT)>;
            label = "CTRL_ALT";
        };

        game_vrise_inv_clear: game_vrise_inv_clear {
            compatible = "zmk,behavior-macro";
            label = "GAME_VRISE_INV_CLEAR";
            #binding-cells = <0>;
            wait-ms = <50>;
            tap-ms = <50>;
            bindings = <&kp R &mkp RCLK &kp E &kp R &mkp RCLK &kp E &kp R &mkp RCLK &kp E &kp R &mkp RCLK &kp E &kp R &mkp RCLK &kp E &kp R &mkp RCLK &kp E &kp R &mkp RCLK &kp E &kp R &mkp RCLK &kp E &kp R &mkp RCLK &kp E &kp R &mkp RCLK &kp E>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE_QWERTZ {
            //        | SW2  | SW3  | SW4  | SW5  | SW6  |  | SW27 | SW26 | SW25 | SW24 | SW23 | 
            // | SW7  | SW8  | SW9  | SW10 | SW11 | SW12 |  | SW33 | SW32 | SW31 | SW30 | SW29 | SW34 |
            // | SW13 | SW14 | SW15 | SW16 | SW17 | SW18 |  | SW39 | SW38 | SW37 | SW36 | SW35 | SW28 |
            //                      | SW19 | SW20 | SW21 |  | SW42 | SW41 | SW40 |

            bindings = <
&kp Q                                        &kp W           &kp E               &kp R             &kp T           &kp DE_Z   &kp U             &kp I               &kp O           &kp P
&mt LCTRL ESCAPE                 &mt LGUI A  &mt LEFT_ALT S  &mt LEFT_CONTROL D  &mt LEFT_SHIFT F  &kp G           &kp H      &mt LEFT_SHIFT J  &mt LEFT_CONTROL K  &mt LEFT_ALT L  &mt LGUI DE_SZ  &mt LEFT_ALT SINGLE_QUOTE
&mt LEFT_SHIFT DE_DOUBLE_QUOTES  &kp DE_Y    &kp X           &kp C               &kp V             &kp B           &kp N      &kp M             &kp COMMA           &kp DOT         &kp DE_MINUS    &mt RIGHT_ALT RETURN
                                                             &caps_word          &kp SPACE         &lt 1 DELETE    &lt 2 TAB  &kp BACKSPACE     &kp RIGHT_ALT
            >;
        };

        SYMBOLS_NUMBERS {
            bindings = <
&kp DE_ACUTE                              &kp DE_DOUBLE_QUOTES  &kp DE_RIGHT_PARENTHESIS  &kp DE_RIGHT_BRACKET  &kp DE_GRAVE        &kp DE_TILDE     &kp DE_N7  &kp DE_N8   &kp DE_N9  &kp DE_CARET
&kp ESCAPE            &kp DE_AT_SIGN      &kp DE_AMPERSAND      &kp DE_DOLLAR             &kp DE_PERCENT        &kp DE_LESS_THAN    &kp DE_EQUAL     &kp DE_N4  &kp DE_N5   &kp DE_N6  &kp KP_PLUS   &kp DE_SINGLE_QUOTE
&mt LEFT_GUI DE_EURO  &kp DE_EXCLAMATION  &kp DE_PIPE           &kp KP_SLASH              &kp DE_BACKSLASH      &kp DE_HASH         &kp KP_ASTERISK  &kp DE_N1  &kp DE_N2   &kp DE_N3  &kp KP_MINUS  &mt LEFT_SHIFT DE_COMMA
                                                                &none                     &none                 &none               &kp BACKSPACE    &kp DE_N0  &kp DE_DOT
            >;
        };

        MEDIA_NAVIGATION {
            bindings = <
&kp F1                        &kp F3  &kp F4  &kp F6            &kp F7            &kp K_PREVIOUS  &kp C_PLAY                &kp C_VOLUME_DOWN     &kp C_VOLUME_UP     &kp K_MUTE
&bt BT_CLR_ALL  &kp F10       &kp F5  &kp F2  &kp F11           &kp F12           &kp LEFT_ARROW  &kp DOWN                  &kp UP_ARROW          &kp RIGHT           &none                &kp PAGE_UP
&kp LEFT_ALT    &bt BT_SEL 0  &kp F8  &kp F9  &none             &kp DE_SECTION    &kp K_NEXT      &kp DE_RIGHT_PARENTHESIS  &kp DE_RIGHT_BRACKET  &kp DE_RIGHT_BRACE  &kp DE_GREATER_THAN  &kp PAGE_DOWN
                                      &none   &kp LEFT_CONTROL  &kp LEFT_SHIFT    &none           &none                     &none
            >;
        };

        GAME {
            bindings = <
&kp G                       &kp Q     &kp W  &kp E  &kp R        &kp T      &kp DE_Z  &kp UP          &kp I          &kp O
&kp ESCAPE  &kp LEFT_SHIFT  &kp A     &kp S  &kp D  &kp F        &kp G      &kp LEFT  &kp DOWN_ARROW  &kp RIGHT      &kp L         &kp P
&kp TAB     &kp LCTRL       &kp DE_Y  &kp X  &kp C  &kp T        &kp B      &kp N     &kp M           &kp DE_PERIOD  &kp DE_COMMA  &kp DE_MINUS
                                      &kp M  &mo 4  &kp SPACE    &kp DE_N5  &kp F12   &kp RETURN
            >;
        };

        GAME_2 {
            bindings = <
&game_vrise_inv_clear             &kp N1  &kp N2     &kp DE_N3  &kp DE_N4    &trans  &trans         &trans  &trans  &trans
&kp DE_DOT             &kp F5     &trans  &trans     &trans     &kp I        &trans  &trans         &trans  &trans  &trans  &kp DE_N7
&kp LEFT_ALT           &kp DE_N7  &kp B   &kp J      &kp V      &kp DE_N5    &trans  &trans         &trans  &trans  &trans  &kp DE_N6
                                          &kp DE_N6  &trans     &trans       &trans  &kp BACKSPACE  &trans
            >;
        };

        COLEMAKDH {
            bindings = <
&kp Q                                            &kp W           &kp F        &kp P             &kp B           &kp J      &kp L             &kp U                &kp DE_Z        &kp DE_SZ
&mt LCTRL ESCAPE                 &mt LEFT_WIN A  &mt LEFT_ALT R  &mt LCTRL S  &mt LEFT_SHIFT T  &kp G           &kp M      &mt LEFT_SHIFT N  &mt LEFT_CONTROL E   &mt LEFT_ALT I  &mt LEFT_GUI O  &mt LEFT_ALT SINGLE_QUOTE
&mt LEFT_SHIFT DE_DOUBLE_QUOTES  &kp DE_Y        &kp X           &kp C        &kp D             &kp V           &kp K      &kp H             &kp COMMA            &kp DOT         &kp DE_MINUS    &mt RIGHT_ALT RET
                                                                 &caps_word   &kp SPACE         &lt 1 DELETE    &lt 2 TAB  &kp BACKSPACE     &mt RIGHT_ALT DE_SZ
            >;
        };
    };
};
