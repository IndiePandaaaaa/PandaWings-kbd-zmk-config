#include "keys_de.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        select_all {
            bindings = <&kp LC(A)>;
            key-positions = <23 24>;
            layers = <0 1 2>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <24 25>;
            layers = <0 1 2>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <25 26>;
            layers = <0 1 2>;
        };

        cut {
            bindings = <&kp LC(X)>;
            key-positions = <26 27>;
        };

        opening_parenthesis {
            bindings = <&kp DE_LEFT_PARENTHESIS>;
            key-positions = <13 14>;
            layers = <0 1>;
        };

        opening_bracket {
            bindings = <&kp DE_LEFT_BRACKET>;
            key-positions = <12 13>;
            layers = <0 1>;
        };

        opening_brace {
            bindings = <&kp DE_LEFT_BRACE>;
            key-positions = <12 14>;
            layers = <0 1>;
        };

        closing_parenthesis {
            bindings = <&kp DE_RIGHT_PARENTHESIS>;
            key-positions = <17 18>;
            layers = <0 1>;
        };

        closing_bracket {
            bindings = <&kp DE_RIGHT_BRACKET>;
            key-positions = <19 18>;
            layers = <0 1>;
        };

        closing_brace {
            bindings = <&kp DE_RIGHT_BRACE>;
            key-positions = <19 17>;
            layers = <0 1>;
        };

        umlaut_a {
            bindings = <&kp DE_A_UMLAUT>;
            key-positions = <29 30>;
            layers = <0>;
        };

        umlaut_o {
            bindings = <&kp DE_O_UMLAUT>;
            key-positions = <30 31>;
            layers = <0>;
        };

        umlaut_u {
            bindings = <&kp DE_U_UMLAUT>;
            key-positions = <29 31>;
            layers = <0>;
        };

        return {
            bindings = <&kp RETURN>;
            key-positions = <36 37>;
            layers = <0>;
        };

        home {
            bindings = <&kp HOME>;
            key-positions = <12 13 14>;
            layers = <0 1>;
        };

        end {
            bindings = <&kp END>;
            key-positions = <17 18 19>;
            layers = <0 1>;
        };

        to_base {
            bindings = <&to 0>;
            key-positions = <35 36 37 38>;
            layers = <3 4 5>;
        };

        to_simple {
            bindings = <&to 5>;
            key-positions = <10 22 21 33>;
            layers = <0>;
        };

        to_game {
            bindings = <&to 4>;
            key-positions = <34 35 38 39>;
            layers = <0>;
        };
    };

    macros {
        ctrl_alt: ctrl_alt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LEFT_ALT)>;
            label = "CTRL_ALT";
        };

        alt_f4: alt_f4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(F4)>;
            label = "ALT_F4";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            //        | SW2  | SW3  | SW4  | SW5  | SW6  |  | SW27 | SW26 | SW25 | SW24 | SW23 | 
            // | SW7  | SW8  | SW9  | SW10 | SW11 | SW12 |  | SW33 | SW32 | SW31 | SW30 | SW29 | SW34 |
            // | SW13 | SW14 | SW15 | SW16 | SW17 | SW18 |  | SW39 | SW38 | SW37 | SW36 | SW35 | SW28 |
            //                      | SW19 | SW20 | SW21 |  | SW42 | SW41 | SW40 |

            bindings = <
&kp Q                                &kp W           &kp E               &kp R             &kp T              &kp DE_Z         &kp U             &kp I               &kp O           &kp P
&kp ESC                  &mt LGUI A  &mt LEFT_ALT S  &mt LEFT_CONTROL D  &mt LEFT_SHIFT F  &mt G RIGHT_ALT    &mt H RIGHT_ALT  &mt LEFT_SHIFT J  &mt LEFT_CONTROL K  &mt LEFT_ALT L  &mt LGUI DE_SHARP_S  &kp DE_ACUTE
&mt LEFT_SHIFT CAPSLOCK  &kp DE_Y    &kp X           &kp C               &kp V             &kp B              &kp N            &kp M             &kp COMMA           &kp DOT         &kp DE_MINUS         &kp RETURN
                                                     &kp CAPSLOCK        &kp SPACE         &lt 1 DELETE       &lt 2 TAB        &kp BACKSPACE     &kp RETURN
            >;
        };

        numbers_symbols {
            bindings = <
&kp DE_SECTION                      &kp DE_DOUBLE_QUOTES  &kp DE_AMPERSAND  &kp DE_DOLLAR     &kp DE_PERCENT         &kp DE_TILDE     &kp DE_N7  &kp DE_N8   &kp DE_N9  &kp DE_CARET
&kp ESCAPE      &kp DE_AT_SIGN      &kp DE_HASH           &kp DE_ACUTE      &kp DE_LESS_THAN  &kp DE_GREATER_THAN    &kp DE_EQUAL     &kp DE_N4  &kp DE_N5   &kp DE_N6  &kp DE_PLUS   &kp DE_SINGLE_QUOTE
&kp LEFT_GUI    &kp DE_EXCLAMATION  &kp DE_PIPE           &kp KP_SLASH      &kp DE_BACKSLASH  &kp DE_HASH            &kp DE_ASTERISK  &kp DE_N1  &kp DE_N2   &kp DE_N3  &kp DE_MINUS  &kp LEFT_SHIFT
                                                          &kp DE_EURO       &none             &none                  &kp BACKSPACE    &kp DE_N0  &kp DE_DOT
            >;
        };

        media_navigation {
            bindings = <
&kp F1                      &kp F3        &kp F2        &kp F4            &kp F7            &kp K_PREVIOUS  &kp C_PLAY   &kp C_VOLUME_UP    &kp F8      &kp F9
&none         &kp F6        &kp F5        &kp F10       &kp F11           &kp F12           &kp LEFT_ARROW  &kp DOWN     &kp UP_ARROW       &kp RIGHT   &kp F5      &none
&kp LEFT_ALT  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3      &bt BT_CLR        &kp K_NEXT      &kp C_PAUSE  &kp C_VOLUME_DOWN  &kp K_MUTE  &kp ESCAPE  &none
                                          &alt_f4       &kp LEFT_CONTROL  &kp LEFT_SHIFT    &none           &none        &none
            >;
        };

        simple_base {
            bindings = <
&kp Q                     &kp W  &kp E  &kp R      &kp T    &kp DE_Z  &kp U          &kp I      &kp O    &kp P
&kp ESC         &kp A     &kp S  &kp D  &kp F      &kp G    &kp H     &kp J          &kp K      &kp L    &kp DE_SHARP_S  &kp TAB
&kp LEFT_SHIFT  &kp DE_Y  &kp X  &kp C  &kp V      &kp B    &kp N     &kp M          &kp COMMA  &kp DOT  &kp DE_MINUS    &kp RETURN
                                 &none  &kp SPACE  &mo 1    &mo 2     &kp BACKSPACE  &none
            >;
        };

        game {
            bindings = <
&kp B                       &kp Q     &kp W  &kp E  &kp R        &kp T      &kp DE_Z  &kp U       &kp I          &kp O
&kp ESCAPE  &kp LEFT_SHIFT  &kp A     &kp S  &kp D  &kp F        &kp G      &kp H     &kp J       &kp K          &kp L         &kp P
&kp TAB     &kp LCTRL       &kp DE_Y  &kp X  &kp C  &kp V        &kp B      &kp N     &kp M       &kp DE_PERIOD  &kp DE_COMMA  &kp DE_MINUS
                                      &kp M  &mo 5  &kp SPACE    &kp DE_N5  &kp F12   &kp RETURN
            >;
        };

        game_2 {
            bindings = <
&kp DE_N1             &kp DE_N2       &kp UP_ARROW    &kp DE_N3        &kp DE_N4     &trans  &trans         &trans  &trans  &trans
&kp DE_COMMA  &kp F5  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp G         &trans  &trans         &trans  &trans  &trans  &trans
&kp LEFT_ALT  &kp F9  &kp K           &kp J           &kp I            &kp DE_DOT    &trans  &trans         &trans  &trans  &trans  &trans
                                      &trans          &trans           &trans        &trans  &kp BACKSPACE  &trans
            >;
        };
    };
};

